\documentclass{article}

% Language setting
% Replace `english' with e.g. `spanish' to change the document language
\usepackage[english]{babel}

% Set page size and margins
% Replace `letterpaper' with `a4paper' for UK/EU standard size
\usepackage[letterpaper,top=2cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]{geometry}

% Useful packages
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage[colorlinks=true, allcolors=blue]{hyperref}

\title{Graphics Shaders for Scaling Photo-Realism in Real-Time Rendering}
\author{Christopher Pane}

\begin{document}
\maketitle

\begin{abstract}
Your abstract.
\end{abstract}

\section{Introduction}

The research done is focused on creating Unity shaders to change the style of 3D content in real time to render virtual humans in different styles ranging from realistic to non-photo realistic.

In order to emulate a non-photo realistic appearance, the following distinct qualities of non-photo realistic renderings were deduced:
\begin{enumerate}
\item Reduced color palette 
\item Thick outlines
\item Non-human features
\end{enumerate}
After examining these key qualities of non-photo realistic renderings, fragment and vertex shaders were developed to utilize screen-space textures and 3D models to scale photo-realism. Fragment shaders were used to apply post-processing effects to a screen-space texture. Vertex shaders were used to modify a mesh. Both shader implementations were combined to increase the effectiveness of the non-photo realistic illusion.


\section{Fragment Shader}

\subsection{Color palette reduction}

To address the non-photo realistic quality of a reduced color palette, a coloring technique from Ordered dithering was used. Ordered dithering applies the following formula to each pixel to determine its nearest color in a limited color palette:
\[
    C_{nearest} = \frac{\lfloor N - 1 \rfloor * C + 0.5}{\lfloor N - 1 \rfloor}
\]
Where $N$ is a vector containing the number of possible colors for each color channel and $C$ is the currently sampled pixel value. By setting the original pixel color to its greyscale value, the color's of the new image now correspond to their scalar value in the range $[0, 1]$. By reinterpreting this information as texture UV coordinates along a $N x 1$ texture, custom palettes can be applied to the texture.

\begin{figure}[h]
\centering
% \includegraphics[width=0.3\textwidth]{ChrisBlackWhite.PNG}
\includegraphics[height=5cm]{ChrisBlackWhite.PNG}
\caption{\label{fig:BlackWhite}Color palette reduction applied on a greyscale image with N = 2.}
\end{figure}

\begin{figure}[h]

    \begin{subfigure}{0.5\textwidth}
        \centering
        \includegraphics[width=0.5\linewidth, height=2cm]{CustomSampler.PNG} 
        \caption{Custom sampler of size $N x 1$}
        \label{fig:CustomSampler}
    \end{subfigure}
    \begin{subfigure}{0.5\textwidth}
        \centering
        \includegraphics[height=5cm]{ChrisCustomSampler.PNG}
        \caption{\ref{fig:BlackWhite} with pixel values as UV coordinates to sample \ref{fig:CustomSampler}}
        \label{fig:subim2}
    \end{subfigure}

    \caption{Using a greyscale image to map to a new color pallete}
    \label{fig:CustomSamplerDemo}
\end{figure}

\subsection{Screen-space outline detection}

To apply thick outlines to a screen-space texture, a screen-space edge detection used. After consider a variety of edge detection algorithms, it was decided that using a canny edge-detection algorithm would be effective in creating the thick borders.

\section{Vertex Shader}

\subsection{Axis-bound growth}

Vertex shaders were used to aid in creating non-photo realistic imagery. It was decided that a technique to adjust the realism of a 3D model was to scale the vertices away from the object origin. However, simply scaling the vertices by a scalar would not aid in the illusion of controlled realism.

The vertex shader was designed to scale each vertex based on a per-vertex encoded vector describing the axis on which the vertex scaling should occur. This information was encoded into the per-vertex color attribute and decoded in the shader to determine how a vertex should be scaled.

This technique takes advantage of the per-vertex attribute $\text{color}$ which typically contains color information from the range $[0, 1]$. By treating this color value as a vector, each vertex can be scaled along an axis at a certain weight. The color value encoded in the per-vertex color was the vector information containing the axis to scale a vertex along.


Given a vertex $V$ positioned at $P_i = \begin{pmatrix}A & B & C\end{pmatrix}$, its per-vertex color $C = \begin{pmatrix}R & G & B\end{pmatrix}$, and a scaling factor $S$, the following formula can be used to determine the vertex's final scaled position:
\[
    P_f = P_i - P_iC + P_iCS = P_i(1 + B(S - 1))
\]

Using this technique, the 3D models used needs to be prepared with:
\begin{itemize}
\item Growth axis color information painted on
\item A sensible location of the object origin
\end{itemize}

\begin{figure}[h]

    \begin{subfigure}{0.5\textwidth}
        \centering
        \includegraphics[height=5cm]{BunnyEarsTextured.PNG} 
        \caption{A textured mesh representing bunny ears, a nose, and whiskers}
        \label{fig:BunnyEarsTextured}
    \end{subfigure}
    \begin{subfigure}{0.5\textwidth}
        \centering
        \includegraphics[height=5cm]{BunnyEarsVertexColors.PNG}
        \caption{The same mesh colored with the per-vertex colors corresponding to its desired growth axis}
        \label{fig:BunnyEarsVertexColors}
    \end{subfigure}

    \caption{A example textured mesh and its underlying per-vertex colors representing vector information.}
    \label{fig:BunnyEarsMesh}
\end{figure}

From the vertex colors shown in \ref{fig:BunnyEarsVertexColors}, each per-vertex color $\begin{pmatrix}R & G & B\end{pmatrix}$ with values in the range $[0, 1]$ directly correspond to the vector $\begin{pmatrix}X & Y & Z\end{pmatrix}$ which represents the weights of how much to scale each axis. In the case for Unity, red corresponds to $X$, green corresponds to $Y$, and blue corresponds to $Z$.
The advantage to storing growth axis information in the per-vertex color attribute instead of in the game engine is performance. By having the information available in the mesh, the GPU never has to interact with the CPU about which axis for a vertex to scale along. Additionally, another advantage is the ease of encoding this information in a 3D modeling software. The process is very similar to weight painting, which makes the process intuitive to an experienced modeler.

\begin{figure}[h]
\centering
\includegraphics[height=5cm]{BunnyEarsScaled65.PNG}
\caption{\label{fig:BunnyEarsScaled65}The \ref{fig:BunnyEarsMesh} mesh with $S = 0.65$ and the original size outlines present.}
\end{figure}

In figure \ref{fig:BunnyEarsScaled65}, it can be seen that parts of the mesh colored red only scale along the $X$ axis, while the parts colored light-green scale along the $Y$ axis entirely and slightly along the $X$ axis. The outlines of the original unscaled mesh remain to help visualize the scaling. Additionally, it can be seen that the nose mesh scales uniformly along each axis. This is caused by the per-vertex color evaluating to $\begin{pmatrix}1 & 1 & 1\end{pmatrix}$, or white.

\subsection{Mesh outline}

To apply an outline to a 3D model in world-space, a copy of the mesh with its normals flipped was created, scaled up slightly, and removed from the lighting pipeline.

\subsection{How to include Figures}

% First you have to upload the image file from your computer using the upload link in the file-tree menu. Then use the includegraphics command to include it in your document. Use the figure environment and the caption command to add a number and a caption to your figure. See the code for Figure \ref{fig:frog} in this section for an example.

Note that your figure will automatically be placed in the most appropriate place for it, given the surrounding text and taking into account other figures or tables that may be close by. You can find out more about adding images to your documents in this help article on \href{https://www.overleaf.com/learn/how-to/Including_images_on_Overleaf}{including images on Overleaf}.

% \begin{figure}
% \centering
% \includegraphics[width=0.3\textwidth]{frog.jpg}
% \caption{\label{fig:frog}This frog was uploaded via the file-tree menu.}
% \end{figure}

\subsection{How to add Tables}

% Use the table and tabular environments for basic tables --- see Table~\ref{tab:widgets}, for example. For more information, please see this help article on \href{https://www.overleaf.com/learn/latex/tables}{tables}. 

% \begin{table}
% \centering
% \begin{tabular}{l|r}
% Item & Quantity \\\hline
% Widgets & 42 \\
% Gadgets & 13
% \end{tabular}
% \caption{\label{tab:widgets}An example table.}
% \end{table}

\subsection{How to add Comments and Track Changes}

Comments can be added to your project by highlighting some text and clicking ``Add comment'' in the top right of the editor pane. To view existing comments, click on the Review menu in the toolbar above. To reply to a comment, click on the Reply button in the lower right corner of the comment. You can close the Review pane by clicking its name on the toolbar when you're done reviewing for the time being.

Track changes are available on all our \href{https://www.overleaf.com/user/subscription/plans}{premium plans}, and can be toggled on or off using the option at the top of the Review pane. Track changes allow you to keep track of every change made to the document, along with the person making the change. 

\subsection{How to add Lists}

You can make lists with automatic numbering \dots

\begin{enumerate}
\item Like this,
\item and like this.
\end{enumerate}
\dots or bullet points \dots
\begin{itemize}
\item Like this,
\item and like this.
\end{itemize}

\subsection{How to write Mathematics}

\LaTeX{} is great at typesetting mathematics. Let $X_1, X_2, \ldots, X_n$ be a sequence of independent and identically distributed random variables with $\text{E}[X_i] = \mu$ and $\text{Var}[X_i] = \sigma^2 < \infty$, and let
\[S_n = \frac{X_1 + X_2 + \cdots + X_n}{n}
      = \frac{1}{n}\sum_{i}^{n} X_i\]
denote their mean. Then as $n$ approaches infinity, the random variables $\sqrt{n}(S_n - \mu)$ converge in distribution to a normal $\mathcal{N}(0, \sigma^2)$.


\subsection{How to change the margins and paper size}

Usually the template you're using will have the page margins and paper size set correctly for that use-case. For example, if you're using a journal article template provided by the journal publisher, that template will be formatted according to their requirements. In these cases, it's best not to alter the margins directly.

If however you're using a more general template, such as this one, and would like to alter the margins, a common way to do so is via the geometry package. You can find the geometry package loaded in the preamble at the top of this example file, and if you'd like to learn more about how to adjust the settings, please visit this help article on \href{https://www.overleaf.com/learn/latex/page_size_and_margins}{page size and margins}.

\subsection{How to change the document language and spell check settings}

Overleaf supports many different languages, including multiple different languages within one document. 

To configure the document language, simply edit the option provided to the babel package in the preamble at the top of this example project. To learn more about the different options, please visit this help article on \href{https://www.overleaf.com/learn/latex/International_language_support}{international language support}.

To change the spell check language, simply open the Overleaf menu at the top left of the editor window, scroll down to the spell check setting, and adjust accordingly.

\subsection{How to add Citations and a References List}

You can simply upload a \verb|.bib| file containing your BibTeX entries, created with a tool such as JabRef. You can then cite entries from it, like this: \cite{greenwade93}. Just remember to specify a bibliography style, as well as the filename of the \verb|.bib|. You can find a \href{https://www.overleaf.com/help/97-how-to-include-a-bibliography-using-bibtex}{video tutorial here} to learn more about BibTeX.

If you have an \href{https://www.overleaf.com/user/subscription/plans}{upgraded account}, you can also import your Mendeley or Zotero library directly as a \verb|.bib| file, via the upload menu in the file-tree.

\subsection{Good luck!}

We hope you find Overleaf useful, and do take a look at our \href{https://www.overleaf.com/learn}{help library} for more tutorials and user guides! Please also let us know if you have any feedback using the Contact Us link at the bottom of the Overleaf menu --- or use the contact form at \url{https://www.overleaf.com/contact}.

\bibliographystyle{alpha}
\bibliography{sample}

\end{document}
